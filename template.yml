AWSTemplateFormatVersion: '2010-09-09'
Description: Customer deployment template for FastAPI backend and React frontend with auto-updates via CodePipeline polling S3.

Parameters:
  ArtifactBucketName:
    Type: String
    Description: Your S3 bucket name in your AWS account for artifacts (cross-account access required post-deployment).
  FrontendZipKey:
    Type: String
    Default: frontend.zip
    Description: S3 object key for frontend zip.
  BackendZipKey:
    Type: String
    Default: backend.zip
    Description: S3 object key for backend zip.
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 key pair for SSH (optional).
  EnvVariables:
    Type: String
    Description: JSON string for environment variables (e.g., {"S3_BUCKET":"my-s3", "TRANSCRIBE_REGION":"us-east-1"}).
  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-0abcdef1234567890  # Replace with latest Amazon Linux 2 AMI ID for your region.

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS and SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0  # For backend API
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Restrict in production

  # IAM Roles
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess  # For any S3 access
        - arn:aws:iam::aws:policy/AmazonTranscribeReadOnlyAccess  # If using Transcribe

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'  # Refined post-deployment via your bucket policy
              - Effect: Allow
                Action:
                  - codedeploy:*
                  - codepipeline:*
                Resource: '*'

  # EC2 Instances
  FrontendEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y ruby nginx  # For React with Nginx
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          systemctl start codedeploy-agent
          systemctl enable codedeploy-agent
          systemctl start nginx
          systemctl enable nginx
      Tags:
        - Key: Name
          Value: FrontendEC2
        - Key: App
          Value: frontend

  BackendEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref PublicSubnet2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y ruby python3 pip
          pip install awscli
          wget https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          systemctl start codedeploy-agent
          systemctl enable codedeploy-agent
      Tags:
        - Key: Name
          Value: BackendEC2
        - Key: App
          Value: backend

  # Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AppALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
      Scheme: internet-facing
      Type: application

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: FrontendTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref FrontendEC2

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: BackendTG
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref BackendEC2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup  # Default to frontend; use rules for backend

  # Customer S3 for Pipeline Artifacts
  PipelineArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub customer-pipeline-artifacts-${AWS::AccountId}

  # CodeDeploy
  FrontendCodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: FrontendApp
      ComputePlatform: Server

  FrontendDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref FrontendCodeDeployApp
      DeploymentGroupName: FrontendDG
      ServiceRoleArn: !GetAtt EC2Role.Arn
      Ec2TagFilters:
        - Key: App
          Value: frontend
          Type: KEY_AND_VALUE

  BackendCodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: BackendApp
      ComputePlatform: Server

  BackendDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref BackendCodeDeployApp
      DeploymentGroupName: BackendDG
      ServiceRoleArn: !GetAtt EC2Role.Arn
      Ec2TagFilters:
        - Key: App
          Value: backend
          Type: KEY_AND_VALUE

  # CodePipeline
  FrontendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: FrontendPipeline
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref ArtifactBucketName
                S3ObjectKey: !Ref FrontendZipKey
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref FrontendCodeDeployApp
                DeploymentGroupName: !Ref FrontendDeploymentGroup
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1

  BackendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: BackendPipeline
      RoleArn: !GetAtt PipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                S3Bucket: !Ref ArtifactBucketName
                S3ObjectKey: !Ref BackendZipKey
                PollForSourceChanges: true
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref BackendCodeDeployApp
                DeploymentGroupName: !Ref BackendDeploymentGroup
              InputArtifacts:
                - Name: SourceOutput
              RunOrder: 1

  # Customer S3 Bucket (for app-specific storage, based on env)
  AppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub customer-app-s3-${AWS::AccountId}

Outputs:
  PipelineRoleArn:
    Value: !GetAtt PipelineRole.Arn
    Description: Share this ARN with the provider to grant cross-account S3 access.
  ALBDnsName:
    Value: !GetAtt ALB.DnsName
    Description: Load Balancer DNS for accessing the app.